- Class: meta
  Course: swirl
  Lesson: Objects
  Author: Jerid Francom
  Type: Standard
  Organization: WFU
  Version: 1.0

# [x] Add 'factor' vectors
#     - numeric, character, factor
# [x] Add introspection with 'class()'

- Class: text
  Output: In this lesson, you will be introduced to the main types of objects that
    we'll work with in R.

- Class: text
  Output: "Don't forget that you can, temporarily, leave the lesson by typing play() and then
    return by typing nxt()."

# Objects
# - data structures (vectors, data frames) lists, matrices, arrays (not covered)

- Class: text
  Output: You've already worked with a key object in R, the vector, in an earlier
    Swirl coding exercise. In this lesson, we will look a little deeper into vectors
    and see another set of objects that are fundamental to understand to be able to
    work effectively in R.

# Vectors
# - c(), :, seq() -- numeric vectors

# - c() -- numeric vectors
- Class: cmd_question
  Output: As you remember, we created a vector using the function c() and a series
    of numbers separated by ','. Let's refresh your coding memory. Create a vector
    that contains the four elements '1,2,3,4' with c().
  CorrectAnswer: c(1,2,3,4)
  AnswerTests: omnitest(correctExpr = 'c(1,2,3,4)')
  Hint: Type 'c(1,2,3,4)'

- Class: text
  Output: As we will see in R, there are often multiple ways to do the same thing.
    In the case of creating vectors of numbers, we can also use two other methods.

# - : -- numeric vectors
- Class: cmd_question
  Output: One alternative to 'c()' uses the ':' operator which allows us to specify
    the start and end of the vector like so '1:4', and the intermediate values are
    filled in for us. Type '1:4' to see this function in action.
  CorrectAnswer: 1:4
  AnswerTests: omnitest('1:4')
  Hint: Type 1:4

# - seq() -- numeric vectors
- Class: cmd_question
  Output: Another way to create a vector of numbers is to use the function, 'seq()'.
    'seq()' can be used with one argument which specifies the largest number in the
    vector, like so 'seq(4). Create a numerical vector with 'seq()' now.
  CorrectAnswer: seq(4)
  AnswerTests: omnitest('seq(4)')
  Hint: Type seq(4)

- Class: cmd_question
  Output: Let's go ahead and create a vector which contains the numerals
    '1, 2, 3, 4' and assign the output to the variable 'x'. Use one of the previous
    methods for creating a vector of numbers.
  CorrectAnswer: x <- 1:4
  AnswerTests: any_of_exprs('x <- c(1,2,3,4)', 'x <- 1:4', 'x <- seq(4)')
  Hint: Type either 'x <- c(1,2,3,4)', 'x <- 1:4', or 'x <- seq(4)'.

# Introspection
# - class()

- Class: cmd_question
  Output: "You can use the class() function to find out what type of data structure
    you have. For example, type class(x) to find out what type of data structure
    x is."
  CorrectAnswer: class(x)
  AnswerTests: omnitest(correctExpr='class(x)')
  Hint: Type class(x) and press Enter.

- Class: text
  Output: "The 'class()' function is an introspection function. That is, it's primary
    job is not to do some operation, but rather to give the user some information
    about the how to use the object. Another introspection operation we saw was
    the '?' before functions."

- Class: cmd_question
  Output: According to 'class()', our variable 'x' is a vector of type 'integer'.
    Integer is a type of number that does not have a decimal point. Vectors
    that contain numbers with decimal points are called 'numeric' vectors.

- Class: text
  Output: "In addition to integer and numeric vectors, there are other types of
    vectors, too. Two other types of vectors that we will commonly use
    in R are character and factor vectors. Let's start with character vectors."

# - c() -- character vectors
- Class: cmd_question
  Output: To create a character vector we use the c() function as we did originally
    for numeric vectors, but now the elements need to be enclosed in either single
    or double quotes. Create a character vector now by typing 
    'c("This", "is", "a", "sentence.")'.
  CorrectAnswer: c("This", "is", "a", "sentence.")
  AnswerTests: omnitest('c("This", "is", "a", "sentence.")')
  Hint: Type 'c("This", "is", "a", "sentence.")'

- Class: cmd_question
  Output: Now assign the output of the previous vector you created to a variable
    named 'y'. Note you can use the up-arrow on your keyboard to avoid retyping
    the operation and then add 'y <-' at the beginning for the assignment.
  CorrectAnswer: y <- c("This", "is", "a", "sentence.")
  AnswerTests: omnitest('y <- c("This", "is", "a", "sentence.")')
  Hint: Type 'y <- c("This", "is", "a", "sentence.")'

- Class: cmd_question
  Output: Now use the class() function to verify what type of vector 'y' is.
  CorrectAnswer: class(y)
  AnswerTests: omnitest('class(y)')
  Hint: Type 'class(y)'.

# - c() -- factor vectors

- Class: text
  Output: Character vectors make a lot of sense to use for text, but what about 
    data that works more like groups? For example, if we have a vector of the 
    parts of speech of words in in a text, we might want to group them into 
    nouns, verbs, adjectives, etc. This is where factor vectors come in. Factor 
    vectors are used to group data into categories.

- Class: cmd_question
  Output: To create a factor we start with either a character or numeric vector
    that makes sense to group into categories. Let's start with a character vector
    with the elements 'c("det", "verb", "det", "noun")' assigned to the variable 'z'.
  CorrectAnswer: z <- c("det", "verb", "det", "noun")
  AnswerTests: omnitest('z <- c("det", "verb", "det", "noun")')
  Hint: Type 'z <- c("det", "verb", "det", "noun")'.

- Class: cmd_question
  Output: Verify that 'z' is a character vector by using the class() function.
  CorrectAnswer: class(z)
  AnswerTests: omnitest('class(z)')
  Hint: Type 'class(z)'.

- Class: cmd_question
  Output: Now we can use the factor() function to convert 'z' into a factor vector.
    Type 'factor(z)' and assign it to the variable 'z'. This will overwrite the
    previous vector 'z' with the new factor vector.
  CorrectAnswer: z <- factor(z)
  AnswerTests: omnitest('z <- factor(z)')
  Hint: Type 'z <- factor(z)'.

- Class: cmd_question
  Output: Now use the class() function to verify that 'z' is now a factor vector.
  CorrectAnswer: class(z)
  AnswerTests: omnitest('class(z)')
  Hint: Type 'class(z)'.

- Class: cmd_question
  Output: Now that we have a factor vector, when we return the value of 'z' to 
    the R console, we see that the values are now grouped into categories, or 
    what are known as 'levels'. Type 'z' and press Enter to see the output.
  CorrectAnswer: z
  AnswerTests: omnitest('z')
  Hint: Type 'z'.

# - properties of vectors
#   - one type (homogeneous)

- Class: text
  Ouput: Stepping back for a moment, let's look at some important properties of vectors.

- Class: text
  Output: One thing about vectors that is notable is that they are of one type and
    never mix types within the same vector. So, if you try to mix numeric values
    with character values in the same vector, like 'c(1,2,3, "hello")' you will get
    an error.

- Class: cmd_question
  Output: You can, however, quote the numerals in the previous code changing the
    numbers into characters and that is just fine. Type 'c("1", "2", "3", "hello")'
    now just to confirm for yourself.
  CorrectAnswer: c("1", "2", "3", "hello")
  AnswerTests: omnitest('c("1", "2", "3", "hello")')
  Hint: Type 'c("1", "2", "3", "hello")'

#  - one dimension (length)

- Class: cmd_question
  Output: Another property of vectors is that they are one dimensional. We can find
    out how long, that is how many elements there are in the vector, with the
    function 'length()'. Use 'length()' to find out how many elements the vector
    'x' has.
  CorrectAnswer: length(x)
  AnswerTests: omnitest('length(x)')
  Hint: Type 'length(x)'

- Class: mult_question
  Output: What is the length of the vector 'x'?
  AnswerChoices: 1;4;8
  CorrectAnswer: 4
  AnswerTests: omnitest(correctVal= '4')
  Hint: The length of the vector 'x' is 4!

# Data structures
# - data frames

- Class: text
  Output: Now that we have a deeper understanding of vectors in R, let's introduce
    another fundamental object in R --the data frame.

- Class: text
  Output: A data frame is really just a grouping of vectors allowing us to store 
    multiple vectors in one object. The vectors, however, must have the same length 
    as they are held in rows and columns much like the grid you see when you work 
    with a spreadsheet program like Excel.

- Class: cmd_question
  Output: Let's create a data frame using the vectors 'x', 'y', and 'z' from before. Type
    'data.frame(x, y, z)' and see what happens.
  CorrectAnswer: data.frame(x, y, z)
  AnswerTests: omnitest(correctExpr='data.frame(x, y, z)')
  Hint: Type 'data.frame(x, y, z)'.

- Class: cmd_question
  Output: Now, let's assign the output of the previous operation to the variable 'my_df'
  CorrectAnswer: my_df <- data.frame(x, y, z)
  AnswerTests: omnitest(correctExpr='my_df <- data.frame(x, y, z)')
  Hint: Type 'my_df <- data.frame(x, y, z)'.

- Class: cmd_question
  Output: Now find the type of object that 'my_df' is with 'class()'.
  CorrectAnswer: class(my_df)
  AnswerTests: omnitest(correctExpr='class(my_df)')
  Hint: Type 'class(my_df)'.

- Class: cmd_question
  Output: As mentioned before a data frame is a grouping of vectors and therefore
    no longer is one dimensional --and cannot be measured in length. We use the
    'dim()' function to find the dimensions of the data frame. Find the dimensions
    of our data frame 'my_df' now.
  CorrectAnswer: dim(my_df)
  AnswerTests: omnitest(correctExpr='dim(my_df)')
  Hint: Type 'dim(my_df)'

- Class: text
  Output: The output from 'dim(my_df)' returns a numerical vector with two elements.
    The first always corresponds to the number of rows and the second the number of
    columns. Remember this point, rows then columns.

- Class: cmd_question
  Output: Say we want to retrieve one of the original vectors from the data frame
    and work with it in isolation. R provides syntax to do just that. All you need
    to do is use the data frame object's name followed by a '$' symbol and then
    the name of the vector. Type 'my_df$x' and see what happens.
  CorrectAnswer: my_df$x
  AnswerTests: omnitest(correctExpr='my_df$x')
  Hint: Type 'my_df$x'

- Class: cmd_question
  Output: Combining the knowledge you have of vectors and data frames, how would you find the length of the 'y' column from the data frame 'my_df'? Type the command now.
  CorrectAnswer: length(my_df$y)
  AnswerTests: omnitest(correctExpr='length(my_df$y)')
  Hint: Type 'length(my_df$y)'.

- Class: mult_question
  Output: What object type will the command 'class(my_df$x)' return?
  AnswerChoices: data.frame;numeric;integer;character;logical
  CorrectAnswer: numeric
  AnswerTests: val_matches('numeric|integer')
  Hint: It's either 'numeric' or 'integer' depending on which method you created
    the 'x' vector.

- Class: text
  Output: That completes this lesson on objects. You've learned quite a bit about
    vectors and data frames. These two objects will be our primary workhorses for
    data analysis so you've got a solid start! Spend some time playing with them on
    your own and reading up on the documentation online or with the '?' command.


